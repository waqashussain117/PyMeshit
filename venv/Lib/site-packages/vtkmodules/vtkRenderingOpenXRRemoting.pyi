from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import vtkmodules.vtkCommonCore
import vtkmodules.vtkRenderingOpenXR

class vtkOpenXRRemotingRenderWindow(vtkmodules.vtkRenderingOpenXR.vtkOpenXRRenderWindow):
    remoting_ip_address:'getset_descriptor'
    remoting_xr_directory:'getset_descriptor'
    def __init__(self, **properties:Any) -> None: ...
    def CopyResultFrame(self) -> None: ...
    def GetNumberOfGenerationsFromBase(self, type:str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type:str) -> int: ...
    def Initialize(self) -> None: ...
    def IsA(self, type:str) -> int: ...
    @staticmethod
    def IsTypeOf(type:str) -> int: ...
    def NewInstance(self) -> 'vtkOpenXRRemotingRenderWindow': ...
    @staticmethod
    def SafeDownCast(o:'vtkObjectBase') -> 'vtkOpenXRRemotingRenderWindow': ...
    def SetRemotingIPAddress(self, host:str) -> None: ...
    def SetRemotingXRDirectory(self, path:str) -> None: ...
    def StereoMidpoint(self) -> None: ...
    def StereoRenderComplete(self) -> None: ...
    def StereoUpdate(self) -> None: ...

